function avg = ne_pl_exclude_outliers_avg(session_path,avg_fullpath,exclude_ba,plot_info)
% excludes outlier volumes from avg, optionally plots the reference time-course, outliers and events
% *outlier_volumes.mat for each run is generated by ne_pl_qa.m
% ne_pl_exclude_outliers_avg('F:\MRI\Curius\20140204','F:\MRI\Curius\20140204\ne_prt2avg_fixation_memory_microstim.avg',[20000 10000],1);

ms = 4; % MarkerSize

if nargin < 3,
	exclude_ba = []; % exclude (epochs) before / after (outlier)
	% if nonempty, 
	% [exclude_ba(1) exclude_ba(2)] replaces settings.fmr_quality.avg_exclude_before_after_outlier (ms)
	% if empty, settings.fmr_quality come from '*outlier_volumes.mat'
end

if nargin < 4,
	plot_info = 1;
end

avg = xff(avg_fullpath);
mat_outliers = findfiles(session_path,'*outlier_volumes.mat');

% empty avg
%                FileVersion: 4
%               FuncDataType: 'VTC'
%     ProtocolTimeResolution: 'Volumes'
%     ResolutionOfDataPoints: 'Volumes'
%             NrOfTimePoints: 0
%                PreInterval: 0
%               PostInterval: 0
%                 NrOfCurves: 0
%                  NrOfFiles: 0
%              BaseDirectory: './'
%                  FileNames: [0x1 cell]
%                      Curve: [0x0 struct]
%            BackgroundColor: 0 0 0
%                  TextColor: 255 255 255
%               BaselineMode: 1
%        AverageBaselineFrom: -2
%          AverageBaselineTo: 0
%              VariationBars: 'StdErr'
%                RunTimeVars: [1x1 struct]

n_runs = length(avg.FileNames);
if length(mat_outliers) ~= n_runs,
	disp(sprintf('ERROR: cannot match runs in avg (%d) to outlier_volumes files (%d)',n_runs,length(mat_outliers)));
	return;
end

% cmap = jet(avg.NrOfCurves);
C = avg.Curve;
cmap = cat(1,C.TimeCourseColor1)/255;

ylim = [];
for r = 1:n_runs
	if ~isempty(findstr(sprintf('run%02d',r),mat_outliers{r})),
		outliers = [];
		load(mat_outliers{r});
		if ~isempty(exclude_ba),
			settings.fmr_quality.avg_exclude_before_after_outlier = exclude_ba;
		end
		if plot_info,
            
			figure('Name',mat_outliers{r},'Position',[200 200 800 800]);
            
            subplot(2,1,1)
			plot([1:fq.Dims(4)]*settings.fmr_create.TR/1000,fq.TC.Foreground,'Color',[0 0 0]); hold on;
			add_volume_markers(outlier_volumes*settings.fmr_create.TR/1000,'Color',[0.9 0.7 0.7],'LineStyle','-');
			plot([1:fq.Dims(4)]*settings.fmr_create.TR/1000,fq.TC.Foreground,'Color',[0 0 0]); hold on;
			ylim = get(gca,'Ylim');
			legend_str = {};
			set(gca,'Xlim',[0 max([1:fq.Dims(4)]*settings.fmr_create.TR/1000)]);
            ylabel('fq.TC.Foreground');
            xlabel('Time (s)');
            
            subplot(2,1,2)
            if isfield(fq,'FD')
                plot([1:fq.Dims(4)]*settings.fmr_create.TR/1000,fq.FD,'Color',[0 0 0]); hold on;
                add_volume_markers(outlier_volumes*settings.fmr_create.TR/1000,'Color',[0.9 0.7 0.7],'LineStyle','-');
                plot([1:fq.Dims(4)]*settings.fmr_create.TR/1000,fq.FD,'Color',[0 0 0]); hold on;
                ylim = get(gca,'Ylim');
                legend_str = {};
                set(gca,'Xlim',[0 max([1:fq.Dims(4)]*settings.fmr_create.TR/1000)]);
                ylabel('fq.FD');
                xlabel('Time (s)');
                
            else 
                plot([1:fq.Dims(4)]*settings.fmr_create.TR/1000,fq.TC.Quality); hold on;
                add_volume_markers(outlier_volumes*settings.fmr_create.TR/1000,'Color',[0.9 0.7 0.7],'LineStyle','-');
                plot([1:fq.Dims(4)]*settings.fmr_create.TR/1000,fq.TC.Quality); hold on;
                ylim = get(gca,'Ylim');
                legend_str = {};
                set(gca,'Xlim',[0 max([1:fq.Dims(4)]*settings.fmr_create.TR/1000)]);
                ylabel('fq.TC.Quality');
                xlabel('Time (s)');
                
            end
            
		end
		
		switch avg.ProtocolTimeResolution
			case 'msec'
				for v = 1:length(outlier_volumes),
					outliers = [outliers (outlier_volumes(v)*settings.fmr_create.TR - settings.fmr_quality.avg_exclude_before_after_outlier(1) : outlier_volumes(v)*settings.fmr_create.TR + settings.fmr_quality.avg_exclude_before_after_outlier(2))]; % in ms
					if plot_info,
						plot([outlier_volumes(v)*settings.fmr_create.TR/1000 - settings.fmr_quality.avg_exclude_before_after_outlier(1)/1000 outlier_volumes(v)*settings.fmr_create.TR/1000 + settings.fmr_quality.avg_exclude_before_after_outlier(2)/1000],...
						[ylim(1) ylim(1)],'r-','LineWidth',4);
					end
				end
		end
		
		H = [];
		for c = 1:avg.NrOfCurves,
			% find out if this condition (curve) is present in this run (file)
			temp = avg.Curve(c).File; files_for_this_curve = [temp.EventPointsInFile]+1; % +1 because avg files are 0-based
			
			if ismember(r,files_for_this_curve),
				
				% find the matching file
				idx_f = find(r==files_for_this_curve);
				
				original_points = avg.Curve(c).File(idx_f).Points;
				[avg.Curve(c).File(idx_f).Points, n_removed] = remove_outliers(avg.Curve(c).File(idx_f).Points,avg,outliers,settings,plot_info,ylim);
				avg.Curve(c).NrOfConditionEvents = avg.Curve(c).NrOfConditionEvents - n_removed;
				if plot_info,
					if ~isempty(original_points)
						h = plot(original_points'/1000,ylim(1)*ones(size(original_points')),'o','Color',cmap(c,:),'MarkerSize',ms);
						legend_str = [legend_str avg.Curve(c).Name];
						H = [H h];
					end
					if ~isempty(avg.Curve(c).File(idx_f).Points)
						plot(avg.Curve(c).File(idx_f).Points/1000,ylim(1),'o','Color',cmap(c,:),'MarkerFaceColor',cmap(c,:),'MarkerSize',ms);
					end

				end
			
			end
		end
		if ~isempty(H), legend(H,legend_str,'Interpreter','none'); end
		
		
	end
	if plot_info,
		ht = title(gca,[mat_outliers{r}],'interpreter','none','FontSize',8,'LineWidth',10);	
		orient('tall');
		saveas(gcf, [mat_outliers{r} '.pdf'], 'pdf');
		close(gcf);
	end
	
end





new_avg_fullpath = [avg_fullpath(1:end-4) '_no_outliers' '.avg'];
avg.SaveAs(new_avg_fullpath);
disp([new_avg_fullpath ' created']);


function [points_without_outliers,n_removed] = remove_outliers(points,avg,outliers,settings,plot_info,ylim)
points_without_outliers = [];
for n = 1:length(points),
	if plot_info, plot([points(n)/1000-avg.PreInterval points(n)/1000+avg.PostInterval],[ylim(1) ylim(1)],'g-'); end;
	if isempty(intersect([points(n)-avg.PreInterval*1000 : points(n)+avg.PostInterval*1000],outliers)),
		points_without_outliers = [points_without_outliers; points(n)];
	end
end
n_removed = length(points) - length(points_without_outliers);



